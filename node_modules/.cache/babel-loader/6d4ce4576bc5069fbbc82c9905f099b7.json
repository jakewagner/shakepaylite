{"ast":null,"code":"var _jsxFileName = \"/Users/jwagner/Documents/shakepaylite/src/scenes/Transactions.jsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { setActivePage, updateTransactions } from \"../data/actions\";\nimport { fetchTransactions } from \"../data/apiMediator\";\nimport { ListItem } from \"../components\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst mapStateToProps = (state, ownProps) => {\n  const {\n    quotes,\n    activeCurrency,\n    transactions\n  } = state;\n  console.log(transactions);\n  return {\n    quotes,\n    activeCurrency,\n    transactions\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return bindActionCreators({\n    updateTransactions,\n    setActivePage\n  }, dispatch);\n};\n\nconst Transactions = props => {\n  _s();\n\n  const {\n    updateTransactions,\n    transactions,\n    activeCurrency\n  } = props;\n  useEffect(() => {\n    const transactionsResponse = async () => await fetchTransactions();\n\n    const data = transactionsResponse();\n    updateTransactions(data);\n  }, []);\n  console.log(transactions); //   if (transactions) {\n  //     return transactions.map((transaction) => {\n  //       if (transaction.currency === activeCurrency) {\n  //         return <ListItem>{transaction.amount}</ListItem>;\n  //       }\n  //       return null;\n  //     });\n  //   }\n\n  return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 10\n  }, this);\n};\n\n_s(Transactions, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = Transactions;\nexport default connect(mapStateToProps, mapDispatchToProps)(Transactions);\n\nvar _c;\n\n$RefreshReg$(_c, \"Transactions\");","map":{"version":3,"sources":["/Users/jwagner/Documents/shakepaylite/src/scenes/Transactions.jsx"],"names":["useEffect","connect","bindActionCreators","setActivePage","updateTransactions","fetchTransactions","ListItem","mapStateToProps","state","ownProps","quotes","activeCurrency","transactions","console","log","mapDispatchToProps","dispatch","Transactions","props","transactionsResponse","data"],"mappings":";;;AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,kBAAT,QAAmC,OAAnC;AAEA,SAASC,aAAT,EAAwBC,kBAAxB,QAAkD,iBAAlD;AACA,SAASC,iBAAT,QAAkC,qBAAlC;AAEA,SAASC,QAAT,QAAyB,eAAzB;;;AAEA,MAAMC,eAAe,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AAC3C,QAAM;AAAEC,IAAAA,MAAF;AAAUC,IAAAA,cAAV;AAA0BC,IAAAA;AAA1B,MAA2CJ,KAAjD;AACAK,EAAAA,OAAO,CAACC,GAAR,CAAYF,YAAZ;AACA,SAAO;AAAEF,IAAAA,MAAF;AAAUC,IAAAA,cAAV;AAA0BC,IAAAA;AAA1B,GAAP;AACD,CAJD;;AAMA,MAAMG,kBAAkB,GAAIC,QAAD,IAAc;AACvC,SAAOd,kBAAkB,CAAC;AAAEE,IAAAA,kBAAF;AAAsBD,IAAAA;AAAtB,GAAD,EAAwCa,QAAxC,CAAzB;AACD,CAFD;;AAIA,MAAMC,YAAY,GAAIC,KAAD,IAAW;AAAA;;AAC9B,QAAM;AAAEd,IAAAA,kBAAF;AAAsBQ,IAAAA,YAAtB;AAAoCD,IAAAA;AAApC,MAAuDO,KAA7D;AACAlB,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMmB,oBAAoB,GAAG,YAAY,MAAMd,iBAAiB,EAAhE;;AACA,UAAMe,IAAI,GAAGD,oBAAoB,EAAjC;AACAf,IAAAA,kBAAkB,CAACgB,IAAD,CAAlB;AACD,GAJQ,EAIN,EAJM,CAAT;AAKAP,EAAAA,OAAO,CAACC,GAAR,CAAYF,YAAZ,EAP8B,CAQ9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,sBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAjBD;;GAAMK,Y;;KAAAA,Y;AAmBN,eAAehB,OAAO,CAACM,eAAD,EAAkBQ,kBAAlB,CAAP,CAA6CE,YAA7C,CAAf","sourcesContent":["import { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\n\nimport { setActivePage, updateTransactions } from \"../data/actions\";\nimport { fetchTransactions } from \"../data/apiMediator\";\n\nimport { ListItem } from \"../components\";\n\nconst mapStateToProps = (state, ownProps) => {\n  const { quotes, activeCurrency, transactions } = state;\n  console.log(transactions);\n  return { quotes, activeCurrency, transactions };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return bindActionCreators({ updateTransactions, setActivePage }, dispatch);\n};\n\nconst Transactions = (props) => {\n  const { updateTransactions, transactions, activeCurrency } = props;\n  useEffect(() => {\n    const transactionsResponse = async () => await fetchTransactions();\n    const data = transactionsResponse();\n    updateTransactions(data);\n  }, []);\n  console.log(transactions);\n  //   if (transactions) {\n  //     return transactions.map((transaction) => {\n  //       if (transaction.currency === activeCurrency) {\n  //         return <ListItem>{transaction.amount}</ListItem>;\n  //       }\n  //       return null;\n  //     });\n  //   }\n  return <p>loading...</p>;\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Transactions);\n"]},"metadata":{},"sourceType":"module"}